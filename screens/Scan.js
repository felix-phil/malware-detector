import React, { useState } from 'react';
import { ScrollView, StyleSheet, View, SafeAreaView } from 'react-native';
import { useTheme, Text, List, IconButton } from 'react-native-paper';
import axios from 'axios';
import Scanning from '../components/animation/Scanning';
import MainButton from '../components/buttons/MainButton';
import { pickPDFFile } from '../services/pick-pdf-file';
import { useDispatch } from 'react-redux';
import * as messagegActions from '../store/actions/messages';
import { PREDICT_ENDPOINT, UPLOAD_FILE_ENDPOINT } from '../constants/endpoints';
import * as progressActions from '../store/actions/progress';

const Scan = ({ navigation }) => {
  const theme = useTheme();
  const [loading, setLoading] = useState(false);
  const [isFileSelected, setisFileSelected] = useState(false);
  const [fileSelected, setFileSelected] = useState(null);
  const [uploadedPath, setUploadedPath] = useState(null);

  const dispatch = useDispatch();

  const resetHandler = () => {
    setisFileSelected(false);
    setFileSelected(null);
  };
  const onPressHandler = async () => {
    if (isFileSelected && uploadedPath) {
      // Predict
      try {
        setLoading(true);
        const res = await axios.post(
          PREDICT_ENDPOINT,
          { path: uploadedPath },
          {
            headers: {
              'Content-Type': 'application/json',
            },
          }
        );
        const prediction = res.data.prediction;
        setisFileSelected(false);
        setLoading(false);
        if (prediction === 'benign') {
          navigation.navigate('Safe', { fileSelected: fileSelected });
        } else {
          navigation.navigate('Warning', { fileSelected: fileSelected });
        }
      } catch (err) {
        messagegActions.setMessage('No File has been selected!', 'info');
        setLoading(false);
      }
    } else {
      // Pick and Upload
      const result = await pickPDFFile();
      // console.log(result);
      if (result.type === 'cancel') {
        //   Show No file Selected
        dispatch(
          messagegActions.setMessage('No File has been selected!', 'info')
        );
        return;
      }
      if (result.mimeType !== 'application/pdf') {
        //   Show invalid File
        await dispatch(
          messagegActions.setMessage('Please choose a PDF file only', 'error')
        );
        return;
      }
      try {
        const localUri = result.uri;

        const filename = localUri.split('/').pop();
        const match = /\.(\w+)$/.exec(filename);

        const filetype = match ? `application/${match[1]}` : 'application/pdf';

        const formData = new FormData();
        formData.append(
          'pdf',
          { uri: localUri, name: filename, type: filetype },
          result.name
        );
        dispatch(progressActions.showProgrss());

        const res = await axios.post(UPLOAD_FILE_ENDPOINT, formData, {
          onUploadProgress: (prg) =>
            dispatch(progressActions.setProgressValue(prg.loaded / prg.total)),
          headers: {
            'Content-Type': 'multipart/form-data',
          },
        });
        setUploadedPath(res.data?.path);

        setFileSelected(result);
        setisFileSelected(true);
        dispatch(progressActions.hideProgress());
      } catch (err) {
        console.log(err);
        dispatch(progressActions.hideProgress());
        dispatch(messagegActions.setMessage('Request failed', 'error'));
      }
    }
  };
  return (
    <SafeAreaView style={styles.screen}>
      <ScrollView
        style={{ flex: 1 }}
        contentContainerStyle={{
          justifyContent: 'center',
          alignItems: 'center',
        }}
      >
        <View style={styles.sectionChip}>
          {fileSelected && isFileSelected && (
            <List.Item
              title={fileSelected.name}
              right={(props) => (
                <IconButton
                  onPress={resetHandler}
                  disabled={loading}
                  {...props}
                  icon="close"
                />
              )}
            />
          )}
        </View>
        <View style={styles.sectionIcon}>
          <Scanning
            animate={loading}
            style={{
              ...styles.icon,
            }}
          />
        </View>
        <View style={styles.sectionForm}>
          <Text style={styles.formLabel}>
            This detector uses Support Vector Machine (SVM) algorithm to predict
            your PDF files.
          </Text>
          <View style={styles.formBtn}>
            <MainButton
              title={
                isFileSelected
                  ? loading
                    ? 'PREDICTING'
                    : 'PREDICT'
                  : 'SELECT PDF FILE'
              }
              mode={'outlined'}
              icon={isFileSelected ? 'file-search-outline' : 'file-outline'}
              loading={loading}
              onPress={onPressHandler}
            />
          </View>
        </View>
      </ScrollView>
    </SafeAreaView>
  );
};

export default Scan;

const styles = StyleSheet.create({
  screen: {
    flex: 1,
  },
  sectionChip: {
    marginVertical: '5%',
    width: '80%',
  },
  sectionIcon: {
    height: 250,
    backgroundColor: 'transparent',
  },
  sectionForm: {
    width: '80%',
  },
  icon: {
    backgroundColor: 'transparent',
  },
  formLabel: {
    color: '#808080',
    fontSize: 17,
    textAlign: 'center',
  },
  formBtn: {
    marginVertical: '15%',
  },
});
